@import com.geirsson.reavealjs.RevealJs._

@def selfSlides = a(href:="https://geirsson.com/assets/scalax-2016/#/", "geirsson.com/assets/scalax-2016")
@def twitter = a(href:="https://twitter.com/olafurpg", "@olafurpg")

@slide
  @h1
    scalafix
  @p
    Smooth migrations to Dotty
  @p
    - Ólafur Geirsson, @twitter
  @p
    @img(style := "border: none; width: 15%; box-shadow: none;", src:="img/scalacenter.png")
@slide
  @h1
    scalafix
  @p
    Migration tooling for everyone!
  @p
    - Ólafur Geirsson, @twitter
  @p
    @img(style := "border: none; width: 15%; box-shadow: none;", src:="img/scalacenter.png")
@slide
  @h2
    About me
  @ul
    @li
      Recent Master's at EPFL
    @li
      65% at Scala Center
    @li
      35% experimenting with own stuff
@slide
  @h2
    scalafmt
  @p
    @img(src:="img/scalafmt-diff.png")
@slide
  @h2
    scalaf@s{mt}ix
  @p
    @img(src:="img/scalafix-diff.png")
@slide
  @h2
    Agenda
  @ol
    @li
      Motivation
    @li
      Demo
    @li
      How it works
@slide
  @h1
    Why?
@slide
  @h2
    Move fast and automatically refactor things
  @comment
    img(src:="img/movefast.jpg")
@slide
  @h2
    Scala
  @ul
    @li
      Refactor: @code{Xor => Either}
    @li
      2.13 collections
    @li
      Best practices: explicit type annotations
    @li
      @code{any2StringAdd}
    @li
      @code{language.postfixOps}
@slide
  @h2
    Dotty
  @ul
    @li
      Union/Intersection types
    @li
      Multiversal equality
    @li
      DOT: a sound foundation
    @li
      Implicit function types
    @li
      Tasty: binary compat
@slide
  @h2
    Experiments
  @ul
    @li
      First-class HList
    @li
      Effect systems
    @li
      Predicate qualified types
@slide
  @h2
    Demo
  @comment
    - Run on slick, see diff in:
      slick/src/main/scala/slick/lifted/ExtensionMethods.scala
@slide
  @h2
    Implemented rewrites
  @ul
    @li
      @code{ExplicitImplicit*}
    @li
      @code{ProcedureSyntax}
    @li
      @code{VolatileLazyVal}
@slide
  @h2
    Potential rewrites
  @ul
    @li
      Organize imports
    @li
      Rename identifier
    @li
      Move class
@slide
  @h2
    How is this different from IntelliJ?
  @ul
    @li
      Integrations: cli, sbt, ci server, ...
    @li
      Built with scalac:
      @ul
        @li
          Accurate types
        @li
          Works for @b{large} projects
    @li
      @(`class`:="fragment")
      I'm excited to see announced @lnk("Migrators API", "???").
@slide
  @h2
    How does scalafix work?
@slide
  @h2
    scala.meta
  @p
    @img(src:="img/scalameta-sketch.jpg")
@slide
  @h2
    Semantic API
  @p
    @hl.scala
      trait SemanticApi {
        /** Returns type annotation for given val/def. */
        def typeSignature(defn: m.Defn): Option[m.Type]
      }
@slide
  @h2
    Formatting
  @p
    @img(src:="img/slick-fmt.png")
@slide
  @(style := "text-align: left;")
  @h1
    THANK YOU
  @p
      - Visit documentation: @a(href:="https://scalacenter.github.io/scalafix/", "scalacenter.github.io/scalafix") @br
      - See slides: @selfSlides @br
      - @a(href:="http://github.com/scalacenter/scalafix", "Contribute with PRs and reporting issues.") @br
      - @a(href:="http://twitter.com/olafurpg", "Follow @olafurpg on Twitter.") @br
      - @a(href:="https://gitter.im/scalacenter/scalafix", "Chat on Gitter.") @br
