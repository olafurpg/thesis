@import com.geirsson.reavealjs.RevealJs._

@def selfSlides = a(href:="https://geirsson.com/assets/flatmap-2017/#/", "geirsson.com/assets/flatmap-2017")

@slide
  @h2
    Move fast and @br refactor with @br scalafix
  @p
  @p
    - Ólafur Páll Geirsson, Scala Center @br
    @twitter
  @comment
    img(style := "border: none; width: 15%; box-shadow: none;", src:="img/scalacenter.png")
@slide
  @h2
    About me
  @ul
    @li
      Devtools for ~2 years
    @li
      65% employed at Scala Center
    @li
      35% experimenting with stuff
@slide
  @h2
    Scala Center
  @p
    @img(style := "border: none; width: 15%; box-shadow: none;", src:="img/scalacenter.png")
  @blockquote
    "For open source. For education."
@slide
  @h2
    scalafmt
  @p
    @img(src:="img/scalafmt-diff.png")
@slide
  @h2
    scalafix
  @p
    @img(src:="img/scalafix-diff.png")
@slide
  @h2
    Agenda
  @ol
    @li
      Motivation
    @li
      Tool demo
    @li
      How it works
    @li
      Rewrite demo
@slide
  @h1
    1. Why?
@slide
  @blockquote
    "define a migration path @br from Scala 2.x to Dotty"
    @br
    @p
      @(fontSize := "0.6em")
      -- May 9th, 2016 - Scala Center Advisory Board
@slide
  @h2
    Move fast and
    @br break
    @br things
@slide
  @h2
    Move fast and
    @br @s{break} refactor
    @br things
@slide
  @h2
    Scala => Scala
@slide
  @h2
    Explicit type annotations
  @p
    @img(src:="img/scalafix-diff.png")
@slide
  @h2
    any2stringadd
  @p
    @img(src:="img/any2stringadd.png")
@slide
  @h2
    Function arity adaptation
  @p
    @img(src:="img/arity.png")
@slide
  @h2
    language.postfixOps
  @p
    @img(src:="img/postfix.png")
@slide
  @h2
    Library => Library
@slide
  @h2
    Xor => Either
  @p
    @img(src:="img/xor.png")
@slide
  @h2
    fs2.Task => IO
  @p
    @img(src:="img/task.png")
@slide
  @h2
    Cross-build cats/scalaz
  @p
    @img(src:="img/functor.png")
@slide
  @h2
    -deprecated
  @p
    @img(src:="img/deprecated.png")
@slide
  @h2
    2. Tool demo
@slide
  @h3
    Step 1:
  @hl.scala
    $ git clone https://github.com/arktekk/linx
    // project/plugins.sbt
    addSbtPlugin("ch.epfl.lamp" % "sbt-dotty" % "0.1.0-RC4")
    // build.sbt
    scalaVersion := dottyLatestNightlyBuild
    $ sbt compile
    -- Error: linx/shared/src/main/scala/linx/Linx.scala:42:15 ----
    42 |  implicit def VarOps[A, X]() = new VarOps[A, X](l)
       |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       |  implicit definition needs explicit type

@slide
  @h3
    Step 2:
  @hl.scala
    // project/plugins.sbt
    addSbtPlugin("ch.epfl.scala" % "sbt-scalafix" % "0.3.2")
    $ sbt "scalafix Dotty"
@markdownSlide
  # Hello world

  - b
  - c
@slide
  @h3
    Step 3:
  @hl.diff
    $ git diff
    -  VarOps[A, X]() = new VarOps[A, X](l)
    +  VarOps[A, X](): Linx.VarOps[A, X] = new VarOps[A, X](l)
  @p
    @fragment
    @lnk("Profit", "https://github.com/arktekk/linx/commit/992a27ac6bf50f17664a144c5a53cc231184f18a")
@slide
  @h3
    Coming soon!
  @p
    > scalafix org/repo/v1.0
@slide
  @h2
    Compared with @br
    @lnk("perl/bash", "https://github.com/japgolly/scalajs-react/blob/master/doc/changelog/1.0.0-migrate.sh")?
@slide
  @h2
    Compared with @br intellij-scala?
  @ul
    @li
      Types/Symbols from scalac
    @li
      CLI-first (batch)
    @li
      @fragment
      I'm excited to see IntelliJ @lnk("Migrators API", "https://blog.jetbrains.com/scala/2016/11/11/intellij-idea-2016-3-rc-scala-js-scala-meta-and-more/")
@slide
  @h2
    Compared with @br scala-refactoring?
  @ul
    @li
      Built with scalameta
    @li
      CLI-first (batch)
@slide
  @table
    @tr
      @th
      @th
        Syntax
      @th
        Semantic
    @tr
      @td
        perl/bash
      @td
        n/a
      @td
        n/a
    @tr
      @td
        scala-refactoring
      @td
        scalac
      @td
        scalac
    @tr
      @td
        scalameta
      @td
        custom
      @td
        scalac
    @tr
      @td
        intellij-scala
      @td
        custom
      @td
        custom
@slide
  @h2
    3. How does @br scalafix work?
@slide
  @h2
    scalafix ♥️ scalameta
  @p
    @img(width:="80%", src:="img/scalameta-sketch.jpg")
@slide
  @h2
    Scalameta Semantic DB
  @ul
    @li
      Schema for
      @ul
        @li
          resolved names
        @li
          compiler messages
        @li
          symbol denotations
    @li
      ~50 lines of Protobuf definitions
    @li
      See @lnk("Semantic tooling at Twitter", "http://scalameta.org/talks/2017-04-21-SemanticToolingAtTwitter.pdf")
@comment
  h2
    Scalameta Semantic DB
  dot
    scalac -> "Semantic DB";
    dotc -> "Semantic DB";
    intellij -> "Semantic DB";
    "Semantic DB" -> scalafix;
    "Semantic DB" -> "Code search";
    "Semantic DB" -> "Your app here...";
@slide
  @h2
    Semantic DB Example
  @hl.scala
    val lst = List[Int](1, x, 3).filter(y => y > 2).headOption

  @hl.scala
    [32..36): List => _root_.scala.collection.immutable.List.apply(Lscala/collection/Seq;)Lscala/collection/immutable/List;.
    [37..40): Int => _root_.scala.Int#
    [48..54): filter => _root_.scala.collection.TraversableLike#filter(Lscala/Function1;)Ljava/lang/Object;.
    [57..58): > => _root_.scala.Int#`>`(I)Z.
    [62..72): headOption => _root_.scala.collection.TraversableLike#headOption()Lscala/Option;.
@slide
  @h2
    Rewrite: Semantic DB => Patch
@slide
  @h2
    Rewrite
  @ul
    @li
      @code{Rewrite.apply("object code")}
    @li
      @code{Rewrite.diff("object code")}
@slide
  @h2
    Patch
  @ul
    @li
      @code{RenameSymbol}
    @li
      @code{AddImport}
    @li
      @code{RemoveToken}
    @li
      ...
@slide
  @dot
    cli -> reflect;
    reflect -> core;
    sbt -> cli;
    pants -> cli;
    cbt -> cli;
    testkit -> core;
@slide
  @h2
    4. Library demo
  @hl.diff
    - List(1, 2).filter(_ > 2).headOption
    + List(1, 2).find(_ > 2)
@slide
  @h2
    Summary
  @ul
    @li
      @fragment
      Move fast and refactor things
    @li
      @fragment
      Scalafix rewrites are easy to
      @ul
        @li
          write
        @li
          publish
        @li
          consume
    @li
      @fragment
      Contributors wanted!
@slide
  @(style := "text-align: left;")
  @h1
    THANK YOU
  @p
      - Visit documentation: @a(href:="https://scalacenter.github.io/scalafix/", "scalacenter.github.io/scalafix") @br
      - @a(href:="http://github.com/scalacenter/scalafix", "Contribute with ideas, reporting issues and PRs.") @br
      - See slides: @selfSlides @br
      - @a(href:="http://twitter.com/olafurpg", "Follow @olafurpg on Twitter.") @br
      - @a(href:="https://gitter.im/scalacenter/scalafix", "Chat on Gitter.") @br
